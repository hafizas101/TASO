// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rules.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rules_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rules_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rules_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rules_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rules_2eproto;
namespace GraphSubst {
class MapOutput;
class MapOutputDefaultTypeInternal;
extern MapOutputDefaultTypeInternal _MapOutput_default_instance_;
class Operator;
class OperatorDefaultTypeInternal;
extern OperatorDefaultTypeInternal _Operator_default_instance_;
class Parameter;
class ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class Rule;
class RuleDefaultTypeInternal;
extern RuleDefaultTypeInternal _Rule_default_instance_;
class RuleCollection;
class RuleCollectionDefaultTypeInternal;
extern RuleCollectionDefaultTypeInternal _RuleCollection_default_instance_;
class Tensor;
class TensorDefaultTypeInternal;
extern TensorDefaultTypeInternal _Tensor_default_instance_;
}  // namespace GraphSubst
PROTOBUF_NAMESPACE_OPEN
template<> ::GraphSubst::MapOutput* Arena::CreateMaybeMessage<::GraphSubst::MapOutput>(Arena*);
template<> ::GraphSubst::Operator* Arena::CreateMaybeMessage<::GraphSubst::Operator>(Arena*);
template<> ::GraphSubst::Parameter* Arena::CreateMaybeMessage<::GraphSubst::Parameter>(Arena*);
template<> ::GraphSubst::Rule* Arena::CreateMaybeMessage<::GraphSubst::Rule>(Arena*);
template<> ::GraphSubst::RuleCollection* Arena::CreateMaybeMessage<::GraphSubst::RuleCollection>(Arena*);
template<> ::GraphSubst::Tensor* Arena::CreateMaybeMessage<::GraphSubst::Tensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GraphSubst {

// ===================================================================

class Parameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GraphSubst.Parameter) */ {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter& operator=(Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameter* New() const final {
    return CreateMaybeMessage<Parameter>(nullptr);
  }

  Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GraphSubst.Parameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rules_2eproto);
    return ::descriptor_table_rules_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required int32 key = 1;
  bool has_key() const;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 value = 2;
  bool has_value() const;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:GraphSubst.Parameter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  friend struct ::TableStruct_rules_2eproto;
};
// -------------------------------------------------------------------

class Tensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GraphSubst.Tensor) */ {
 public:
  Tensor();
  virtual ~Tensor();

  Tensor(const Tensor& from);
  Tensor(Tensor&& from) noexcept
    : Tensor() {
    *this = ::std::move(from);
  }

  inline Tensor& operator=(const Tensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tensor& operator=(Tensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tensor* internal_default_instance() {
    return reinterpret_cast<const Tensor*>(
               &_Tensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Tensor& a, Tensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Tensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tensor* New() const final {
    return CreateMaybeMessage<Tensor>(nullptr);
  }

  Tensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tensor& from);
  void MergeFrom(const Tensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GraphSubst.Tensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rules_2eproto);
    return ::descriptor_table_rules_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpIdFieldNumber = 1,
    kTsIdFieldNumber = 2,
  };
  // required int32 opId = 1;
  bool has_opid() const;
  void clear_opid();
  ::PROTOBUF_NAMESPACE_ID::int32 opid() const;
  void set_opid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 tsId = 2;
  bool has_tsid() const;
  void clear_tsid();
  ::PROTOBUF_NAMESPACE_ID::int32 tsid() const;
  void set_tsid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:GraphSubst.Tensor)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 opid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tsid_;
  friend struct ::TableStruct_rules_2eproto;
};
// -------------------------------------------------------------------

class Operator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GraphSubst.Operator) */ {
 public:
  Operator();
  virtual ~Operator();

  Operator(const Operator& from);
  Operator(Operator&& from) noexcept
    : Operator() {
    *this = ::std::move(from);
  }

  inline Operator& operator=(const Operator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operator& operator=(Operator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operator* internal_default_instance() {
    return reinterpret_cast<const Operator*>(
               &_Operator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Operator& a, Operator& b) {
    a.Swap(&b);
  }
  inline void Swap(Operator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operator* New() const final {
    return CreateMaybeMessage<Operator>(nullptr);
  }

  Operator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operator& from);
  void MergeFrom(const Operator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GraphSubst.Operator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rules_2eproto);
    return ::descriptor_table_rules_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 2,
    kParaFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated .GraphSubst.Tensor input = 2;
  int input_size() const;
  void clear_input();
  ::GraphSubst::Tensor* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Tensor >*
      mutable_input();
  const ::GraphSubst::Tensor& input(int index) const;
  ::GraphSubst::Tensor* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Tensor >&
      input() const;

  // repeated .GraphSubst.Parameter para = 3;
  int para_size() const;
  void clear_para();
  ::GraphSubst::Parameter* mutable_para(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Parameter >*
      mutable_para();
  const ::GraphSubst::Parameter& para(int index) const;
  ::GraphSubst::Parameter* add_para();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Parameter >&
      para() const;

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:GraphSubst.Operator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Tensor > input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Parameter > para_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_rules_2eproto;
};
// -------------------------------------------------------------------

class MapOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GraphSubst.MapOutput) */ {
 public:
  MapOutput();
  virtual ~MapOutput();

  MapOutput(const MapOutput& from);
  MapOutput(MapOutput&& from) noexcept
    : MapOutput() {
    *this = ::std::move(from);
  }

  inline MapOutput& operator=(const MapOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapOutput& operator=(MapOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapOutput* internal_default_instance() {
    return reinterpret_cast<const MapOutput*>(
               &_MapOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MapOutput& a, MapOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(MapOutput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapOutput* New() const final {
    return CreateMaybeMessage<MapOutput>(nullptr);
  }

  MapOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapOutput& from);
  void MergeFrom(const MapOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GraphSubst.MapOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rules_2eproto);
    return ::descriptor_table_rules_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcOpIdFieldNumber = 1,
    kDstOpIdFieldNumber = 2,
    kSrcTsIdFieldNumber = 3,
    kDstTsIdFieldNumber = 4,
  };
  // required int32 srcOpId = 1;
  bool has_srcopid() const;
  void clear_srcopid();
  ::PROTOBUF_NAMESPACE_ID::int32 srcopid() const;
  void set_srcopid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 dstOpId = 2;
  bool has_dstopid() const;
  void clear_dstopid();
  ::PROTOBUF_NAMESPACE_ID::int32 dstopid() const;
  void set_dstopid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 srcTsId = 3;
  bool has_srctsid() const;
  void clear_srctsid();
  ::PROTOBUF_NAMESPACE_ID::int32 srctsid() const;
  void set_srctsid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 dstTsId = 4;
  bool has_dsttsid() const;
  void clear_dsttsid();
  ::PROTOBUF_NAMESPACE_ID::int32 dsttsid() const;
  void set_dsttsid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:GraphSubst.MapOutput)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 srcopid_;
  ::PROTOBUF_NAMESPACE_ID::int32 dstopid_;
  ::PROTOBUF_NAMESPACE_ID::int32 srctsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 dsttsid_;
  friend struct ::TableStruct_rules_2eproto;
};
// -------------------------------------------------------------------

class Rule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GraphSubst.Rule) */ {
 public:
  Rule();
  virtual ~Rule();

  Rule(const Rule& from);
  Rule(Rule&& from) noexcept
    : Rule() {
    *this = ::std::move(from);
  }

  inline Rule& operator=(const Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rule& operator=(Rule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rule* internal_default_instance() {
    return reinterpret_cast<const Rule*>(
               &_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Rule& a, Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(Rule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rule* New() const final {
    return CreateMaybeMessage<Rule>(nullptr);
  }

  Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rule& from);
  void MergeFrom(const Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GraphSubst.Rule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rules_2eproto);
    return ::descriptor_table_rules_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcOpFieldNumber = 1,
    kDstOpFieldNumber = 2,
    kMappedOutputFieldNumber = 3,
  };
  // repeated .GraphSubst.Operator srcOp = 1;
  int srcop_size() const;
  void clear_srcop();
  ::GraphSubst::Operator* mutable_srcop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Operator >*
      mutable_srcop();
  const ::GraphSubst::Operator& srcop(int index) const;
  ::GraphSubst::Operator* add_srcop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Operator >&
      srcop() const;

  // repeated .GraphSubst.Operator dstOp = 2;
  int dstop_size() const;
  void clear_dstop();
  ::GraphSubst::Operator* mutable_dstop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Operator >*
      mutable_dstop();
  const ::GraphSubst::Operator& dstop(int index) const;
  ::GraphSubst::Operator* add_dstop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Operator >&
      dstop() const;

  // repeated .GraphSubst.MapOutput mappedOutput = 3;
  int mappedoutput_size() const;
  void clear_mappedoutput();
  ::GraphSubst::MapOutput* mutable_mappedoutput(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::MapOutput >*
      mutable_mappedoutput();
  const ::GraphSubst::MapOutput& mappedoutput(int index) const;
  ::GraphSubst::MapOutput* add_mappedoutput();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::MapOutput >&
      mappedoutput() const;

  // @@protoc_insertion_point(class_scope:GraphSubst.Rule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Operator > srcop_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Operator > dstop_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::MapOutput > mappedoutput_;
  friend struct ::TableStruct_rules_2eproto;
};
// -------------------------------------------------------------------

class RuleCollection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GraphSubst.RuleCollection) */ {
 public:
  RuleCollection();
  virtual ~RuleCollection();

  RuleCollection(const RuleCollection& from);
  RuleCollection(RuleCollection&& from) noexcept
    : RuleCollection() {
    *this = ::std::move(from);
  }

  inline RuleCollection& operator=(const RuleCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleCollection& operator=(RuleCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleCollection* internal_default_instance() {
    return reinterpret_cast<const RuleCollection*>(
               &_RuleCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RuleCollection& a, RuleCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleCollection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleCollection* New() const final {
    return CreateMaybeMessage<RuleCollection>(nullptr);
  }

  RuleCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleCollection& from);
  void MergeFrom(const RuleCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GraphSubst.RuleCollection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rules_2eproto);
    return ::descriptor_table_rules_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleFieldNumber = 1,
  };
  // repeated .GraphSubst.Rule rule = 1;
  int rule_size() const;
  void clear_rule();
  ::GraphSubst::Rule* mutable_rule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Rule >*
      mutable_rule();
  const ::GraphSubst::Rule& rule(int index) const;
  ::GraphSubst::Rule* add_rule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Rule >&
      rule() const;

  // @@protoc_insertion_point(class_scope:GraphSubst.RuleCollection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Rule > rule_;
  friend struct ::TableStruct_rules_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Parameter

// required int32 key = 1;
inline bool Parameter::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parameter::clear_key() {
  key_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameter::key() const {
  // @@protoc_insertion_point(field_get:GraphSubst.Parameter.key)
  return key_;
}
inline void Parameter::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  key_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.Parameter.key)
}

// required int32 value = 2;
inline bool Parameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parameter::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameter::value() const {
  // @@protoc_insertion_point(field_get:GraphSubst.Parameter.value)
  return value_;
}
inline void Parameter::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.Parameter.value)
}

// -------------------------------------------------------------------

// Tensor

// required int32 opId = 1;
inline bool Tensor::has_opid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tensor::clear_opid() {
  opid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::opid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.Tensor.opId)
  return opid_;
}
inline void Tensor::set_opid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  opid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.Tensor.opId)
}

// required int32 tsId = 2;
inline bool Tensor::has_tsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tensor::clear_tsid() {
  tsid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::tsid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.Tensor.tsId)
  return tsid_;
}
inline void Tensor::set_tsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  tsid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.Tensor.tsId)
}

// -------------------------------------------------------------------

// Operator

// required int32 type = 1;
inline bool Operator::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operator::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operator::type() const {
  // @@protoc_insertion_point(field_get:GraphSubst.Operator.type)
  return type_;
}
inline void Operator::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.Operator.type)
}

// repeated .GraphSubst.Tensor input = 2;
inline int Operator::input_size() const {
  return input_.size();
}
inline void Operator::clear_input() {
  input_.Clear();
}
inline ::GraphSubst::Tensor* Operator::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.Operator.input)
  return input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Tensor >*
Operator::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.Operator.input)
  return &input_;
}
inline const ::GraphSubst::Tensor& Operator::input(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.Operator.input)
  return input_.Get(index);
}
inline ::GraphSubst::Tensor* Operator::add_input() {
  // @@protoc_insertion_point(field_add:GraphSubst.Operator.input)
  return input_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Tensor >&
Operator::input() const {
  // @@protoc_insertion_point(field_list:GraphSubst.Operator.input)
  return input_;
}

// repeated .GraphSubst.Parameter para = 3;
inline int Operator::para_size() const {
  return para_.size();
}
inline void Operator::clear_para() {
  para_.Clear();
}
inline ::GraphSubst::Parameter* Operator::mutable_para(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.Operator.para)
  return para_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Parameter >*
Operator::mutable_para() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.Operator.para)
  return &para_;
}
inline const ::GraphSubst::Parameter& Operator::para(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.Operator.para)
  return para_.Get(index);
}
inline ::GraphSubst::Parameter* Operator::add_para() {
  // @@protoc_insertion_point(field_add:GraphSubst.Operator.para)
  return para_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Parameter >&
Operator::para() const {
  // @@protoc_insertion_point(field_list:GraphSubst.Operator.para)
  return para_;
}

// -------------------------------------------------------------------

// MapOutput

// required int32 srcOpId = 1;
inline bool MapOutput::has_srcopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapOutput::clear_srcopid() {
  srcopid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapOutput::srcopid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.MapOutput.srcOpId)
  return srcopid_;
}
inline void MapOutput::set_srcopid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  srcopid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.MapOutput.srcOpId)
}

// required int32 dstOpId = 2;
inline bool MapOutput::has_dstopid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapOutput::clear_dstopid() {
  dstopid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapOutput::dstopid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.MapOutput.dstOpId)
  return dstopid_;
}
inline void MapOutput::set_dstopid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dstopid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.MapOutput.dstOpId)
}

// required int32 srcTsId = 3;
inline bool MapOutput::has_srctsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapOutput::clear_srctsid() {
  srctsid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapOutput::srctsid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.MapOutput.srcTsId)
  return srctsid_;
}
inline void MapOutput::set_srctsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  srctsid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.MapOutput.srcTsId)
}

// required int32 dstTsId = 4;
inline bool MapOutput::has_dsttsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapOutput::clear_dsttsid() {
  dsttsid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapOutput::dsttsid() const {
  // @@protoc_insertion_point(field_get:GraphSubst.MapOutput.dstTsId)
  return dsttsid_;
}
inline void MapOutput::set_dsttsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  dsttsid_ = value;
  // @@protoc_insertion_point(field_set:GraphSubst.MapOutput.dstTsId)
}

// -------------------------------------------------------------------

// Rule

// repeated .GraphSubst.Operator srcOp = 1;
inline int Rule::srcop_size() const {
  return srcop_.size();
}
inline void Rule::clear_srcop() {
  srcop_.Clear();
}
inline ::GraphSubst::Operator* Rule::mutable_srcop(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.Rule.srcOp)
  return srcop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Operator >*
Rule::mutable_srcop() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.Rule.srcOp)
  return &srcop_;
}
inline const ::GraphSubst::Operator& Rule::srcop(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.Rule.srcOp)
  return srcop_.Get(index);
}
inline ::GraphSubst::Operator* Rule::add_srcop() {
  // @@protoc_insertion_point(field_add:GraphSubst.Rule.srcOp)
  return srcop_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Operator >&
Rule::srcop() const {
  // @@protoc_insertion_point(field_list:GraphSubst.Rule.srcOp)
  return srcop_;
}

// repeated .GraphSubst.Operator dstOp = 2;
inline int Rule::dstop_size() const {
  return dstop_.size();
}
inline void Rule::clear_dstop() {
  dstop_.Clear();
}
inline ::GraphSubst::Operator* Rule::mutable_dstop(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.Rule.dstOp)
  return dstop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Operator >*
Rule::mutable_dstop() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.Rule.dstOp)
  return &dstop_;
}
inline const ::GraphSubst::Operator& Rule::dstop(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.Rule.dstOp)
  return dstop_.Get(index);
}
inline ::GraphSubst::Operator* Rule::add_dstop() {
  // @@protoc_insertion_point(field_add:GraphSubst.Rule.dstOp)
  return dstop_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Operator >&
Rule::dstop() const {
  // @@protoc_insertion_point(field_list:GraphSubst.Rule.dstOp)
  return dstop_;
}

// repeated .GraphSubst.MapOutput mappedOutput = 3;
inline int Rule::mappedoutput_size() const {
  return mappedoutput_.size();
}
inline void Rule::clear_mappedoutput() {
  mappedoutput_.Clear();
}
inline ::GraphSubst::MapOutput* Rule::mutable_mappedoutput(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.Rule.mappedOutput)
  return mappedoutput_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::MapOutput >*
Rule::mutable_mappedoutput() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.Rule.mappedOutput)
  return &mappedoutput_;
}
inline const ::GraphSubst::MapOutput& Rule::mappedoutput(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.Rule.mappedOutput)
  return mappedoutput_.Get(index);
}
inline ::GraphSubst::MapOutput* Rule::add_mappedoutput() {
  // @@protoc_insertion_point(field_add:GraphSubst.Rule.mappedOutput)
  return mappedoutput_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::MapOutput >&
Rule::mappedoutput() const {
  // @@protoc_insertion_point(field_list:GraphSubst.Rule.mappedOutput)
  return mappedoutput_;
}

// -------------------------------------------------------------------

// RuleCollection

// repeated .GraphSubst.Rule rule = 1;
inline int RuleCollection::rule_size() const {
  return rule_.size();
}
inline void RuleCollection::clear_rule() {
  rule_.Clear();
}
inline ::GraphSubst::Rule* RuleCollection::mutable_rule(int index) {
  // @@protoc_insertion_point(field_mutable:GraphSubst.RuleCollection.rule)
  return rule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Rule >*
RuleCollection::mutable_rule() {
  // @@protoc_insertion_point(field_mutable_list:GraphSubst.RuleCollection.rule)
  return &rule_;
}
inline const ::GraphSubst::Rule& RuleCollection::rule(int index) const {
  // @@protoc_insertion_point(field_get:GraphSubst.RuleCollection.rule)
  return rule_.Get(index);
}
inline ::GraphSubst::Rule* RuleCollection::add_rule() {
  // @@protoc_insertion_point(field_add:GraphSubst.RuleCollection.rule)
  return rule_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GraphSubst::Rule >&
RuleCollection::rule() const {
  // @@protoc_insertion_point(field_list:GraphSubst.RuleCollection.rule)
  return rule_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GraphSubst

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rules_2eproto
